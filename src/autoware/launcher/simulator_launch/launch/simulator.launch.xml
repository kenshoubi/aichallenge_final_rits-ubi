<launch>
  
  <arg name="launch_dummy_perception" />
  <arg name="launch_dummy_vehicle"/>
  
  <arg name="perception/enable_detection_failure" default="false" description="enable to simulate detection failure when using dummy perception"/>
  <arg name="perception/enable_object_recognition" default="true" description="enable object recognition"/> <!-- change true -->
  <arg name="perception/enable_traffic_light" default="false" description="enable traffic light"/>
  <arg name="sensing/visible_range" default="300.0" description="visible range when using dummy perception"/>

  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="initial_engage_state" default="true" description="/vehicle/engage state after starting Autoware"/>

  <let name="vehicle_model_pkg" value="$(find-pkg-share $(var vehicle_model)_description)"/>

  <group if="$(var scenario_simulation)">
    <include file="$(find-pkg-share fault_injection)/launch/fault_injection.launch.xml"/>
  </group>

  <!-- Dummy Perception -->
  <group if="$(var launch_dummy_perception)">
    <include file="$(find-pkg-share dummy_perception_publisher)/launch/dummy_perception_publisher.launch.xml">
      <arg name="real" value="$(var perception/enable_detection_failure)"/>
      <arg name="use_object_recognition" value="$(var perception/enable_object_recognition)"/>
      <arg name="visible_range" value="$(var sensing/visible_range)"/>
    </include>
  </group>


  <!-- perception module -->
  <group>
    <push-ros-namespace namespace="perception"/>
    <!-- object recognition -->
    <group if="$(var perception/enable_object_recognition)">

      <!-- ADD detection module 
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share perception_launch)/launch/object_recognition/detection/detection.launch.xml">
          <arg name="mode" value="$(var mode)"/>
          <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
          <arg name="image_raw0" value="$(var image_raw0)"/>
          <arg name="camera_info0" value="$(var camera_info0)"/>
          <arg name="image_raw1" value="$(var image_raw1)"/>
          <arg name="camera_info1" value="$(var camera_info1)"/>
          <arg name="image_raw2" value="$(var image_raw2)"/>
          <arg name="camera_info2" value="$(var camera_info2)"/>
          <arg name="image_raw3" value="$(var image_raw3)"/>
          <arg name="camera_info3" value="$(var camera_info3)"/>
          <arg name="image_raw4" value="$(var image_raw4)"/>
          <arg name="camera_info4" value="$(var camera_info4)"/>
          <arg name="image_raw5" value="$(var image_raw5)"/>
          <arg name="camera_info5" value="$(var camera_info5)"/>
          <arg name="image_raw6" value="$(var image_raw6)"/>
          <arg name="camera_info6" value="$(var camera_info6)"/>
          <arg name="image_raw7" value="$(var image_raw7)"/>
          <arg name="camera_info7" value="$(var camera_info7)"/>
          <arg name="image_number" value="$(var image_number)"/>
          <arg name="use_pointcloud_map" value="$(var use_pointcloud_map)"/>
        </include>
      </group>-->

      <push-ros-namespace namespace="object_recognition"/>
      <!-- tracking module -->
      <group>
        <push-ros-namespace namespace="tracking"/>
        <include file="$(find-pkg-share perception_launch)/launch/object_recognition/tracking/tracking.launch.xml">
        </include>
      </group>
      <!-- prediction module -->
      <group>
        <push-ros-namespace namespace="prediction"/>
        <include file="$(find-pkg-share perception_launch)/launch/object_recognition/prediction/prediction.launch.xml">
          <arg name="use_vector_map" value="true" />
        </include>
      </group>
    </group>

    <!-- publish empty objects instead of object recognition module -->
    <group unless="$(var perception/enable_object_recognition)">
      <push-ros-namespace namespace="object_recognition"/>
      <node pkg="dummy_perception_publisher" exec="empty_objects_publisher" name="empty_objects_publisher" output="screen">
        <remap from="~/output/objects" to="/perception/object_recognition/objects" />
      </node>
    </group>


    <!-- object segmentation module -->
    <group>
      <push-ros-namespace namespace="occupancy_grid_map"/>
      <!-- Occupancy Grid -->
      <include file="$(find-pkg-share perception_launch)/launch/occupancy_grid_map/occupancy_grid_map.launch.py">
        <arg name="input_obstacle_pointcloud" value="true" />
        <arg name="input_obstacle_and_raw_pointcloud" value="false" />
        <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/pointcloud" />
        <arg name="output" value="/perception/occupancy_grid_map/map" />
      </include>
    </group>

    <!-- traffic light module -->
    <group if="$(var perception/enable_traffic_light)">
      <push-ros-namespace namespace="traffic_light_recognition"/>
      <include file="$(find-pkg-share perception_launch)/launch/traffic_light_recognition/traffic_light.launch.xml"></include>
    </group>
  </group>

  <!-- Simulator model -->
  <group if="$(var launch_dummy_vehicle)">
    <arg name="simulator_model" default="$(var vehicle_model_pkg)/config/simulator_model.param.yaml" description="path to the file of simulator model"/>
    <include file="$(find-pkg-share simple_planning_simulator)/launch/simple_planning_simulator.launch.py">
      <arg name="simulator_model_param_file" value="$(var simulator_model)"/>
      <arg name="initial_engage_state" value="$(var initial_engage_state)"/>
    </include>
  </group>

</launch>
